#!/usr/bin/env node

const yargs = require('yargs');
const exec = require('child_process').exec;
const pkg = require('../package.json');
const fs = require('fs');
const NavAPI = require("../src/navigation-api.js");
const ImageManager = require("../src/image-manager.js");
const ProgressReporter = require("../src/reporters/progress-reporter.js");
const XUnitReporter = require("../src/reporters/xunit-reporter.js");

const argv = yargs
            .usage(`Usage: $0 
                    --script [path] 
                    --screenshotDir [screenshotDir] 
                    --test
                    --threshold [threshold]
                    --reporters [reporters] 
                    --xunitFile [xunitFile]`)
            .demandOption(['script'])
            .argv;

if (argv.screenshotDir) {
    ImageManager.setScreenshotDir(argv.screenshotDir);
}

const getReporters = function(reportersArg = '') {
    const reportersStr = reportersArg.split(",");
    return reportersStr.map((r) => {
        switch(r) {
            case 'progress':
                return ProgressReporter;
            case 'xunit':
                return XUnitReporter;
            default:
                return ProgressReporter;
        }
    });
}

if (argv.script) {
    const navScript = require(argv.script);
    navScript({ NavAPI, ImageManager }, argv).then(() => {
        if(argv.test) {
            if (typeof argv.threshold === 'number') {
                ImageManager.setThreshold(argv.threshold);
            }
            return ImageManager.compareAll().then(() => {
                // Present the results
                const reporters = getReporters(argv.reporters);
                const comparisonResults = ImageManager.getComparisonResults();
                reporters.forEach((reporter) => {
                    reporter.report(comparisonResults, argv);
                });
                // Cleanup and exit
                const files  =Object.keys(comparisonResults);
                const numFailedTests = files.filter((f) => !comparisonResults[f]).length;
                NavAPI.kill();
                if (numFailedTests) {
                    process.exit(1);
                } else {
                    process.exit(0);
                }
            });
        }
    });
}

function handleExit(err) {
  console.log(err);
  NavAPI.kill();
}
process.on('uncaughtException', handleExit);
process.on('beforeExit', handleExit);
process.on('unhandledRejection', handleExit);
process.on('SIGINT', handleExit);